plugins {
    id 'org.springframework.boot'
    id 'java'
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
}

version 'current'
sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
    main {
        resources {
            srcDir "${project(':auth').projectDir}/src/main/resources"
        }
    }
}
dependencies {
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$KOTLIN_CR_V"
    api "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_V"
    api "org.jetbrains.kotlinx:kotlinx-io-jvm:0.1.15"
    api project(':konsole')
    api project(':auth')
    api project(':serverparts')
    implementation project(':konsole')
    implementation project(':auth')
    implementation project(':serverparts')

    testImplementation project(path: ':auth')
    api group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0'
    testImplementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task copyLicenseHtml(type: Copy) {
    def f = rootProject.file('auth/src/main/resources/de/mel/auth/licences.html')
    def t = rootProject.file('miniserver/src/main/resources/de/mel/auth/')
    from(f)
    into(t)
}

// the next parts build a single jar
def props = new Properties()
ext {
    buildVariant = "standalone"
    jarName = "${project.name}.jar"
}
jar { enabled = true }
task createProperties() {
    doLast {
        println "createProperties($buildDir)"
        props['version'] = "${VERSION}".toString()
        props['commit'] = "${COMMIT}".toString()
        props['variant'] = buildVariant
        //store in jar
        File resources = new File(buildDir, "resources")
        File main = new File(resources, "main")
        File de = new File(main, "de")
        File mel = new File(de, "mel")
        mel.mkdirs()
        new File(mel, "version.properties").withWriter { w -> props.store(w, null) }
        File libs = new File(buildDir, "libs")
        libs.mkdirs()
        new File(libs, "${jarName}.properties").withWriter { w -> props.store(w, null) }
    }
}
bootJar {
    mainClassName = 'de.mel.web.blog.Blog'
    archiveFileName = jarName
}
processResources.dependsOn(createProperties)
// buildJarstuff ends here