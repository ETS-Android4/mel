import java.time.LocalDateTime

plugins {
    id 'application'
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.7'
}

javafx {
    version = project.javaFxVersion
    modules = project.javaFxModules
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        resources {
            srcDir "${project(':filedumpfx').projectDir}/src/main/resources"
            srcDir "${project(':filesyncfx').projectDir}/src/main/resources"
            srcDir "${project(':filesync').projectDir}/src/main/resources"
            srcDir "${project(':contactsfx').projectDir}/src/main/resources"
            srcDir "${project(':contacts').projectDir}/src/main/resources"
            srcDir "${project(':authfx').projectDir}/src/main/resources"
            srcDir "${project(':auth').projectDir}/src/main/resources"
        }
    }
}

version = 1.0

ext {
    buildVersion = new Date().getTime().toString()
    buildVariant = "fx"
}

dependencies {
    implementation project(':filedumpfx')
//    compile project(':konsole')
//    compile project(':auth')
//    compile project(':authfx')
    implementation project(path: ':filesyncfx')
    implementation project(path: ':contactsfx')
    testImplementation project(configuration: 'driveTestOutput', path: ':filesync')
    testImplementation 'junit:junit:4.12'
}


task createProperties(dependsOn: processResources) {
    doLast {
        Properties p = new Properties()
        p['version'] = buildVersion
        p['variant'] = buildVariant
        //store in jar
        new File("$buildDir/resources/main/version.properties").withWriter { w -> p.store(w, null) }
        // store in build directory
        new File("$buildDir/version.properties").withWriter { w -> p.store(w, null) }
        //new File("src/main/resources/version.properties").withWriter {w -> p.store(w,null)}
    }
}

build {
    dependsOn createProperties
}


classes {
    dependsOn createProperties
}
application {
    mainClassName = 'de.mel.fxbundle.Main'
}

task buildFxJar(type: Jar) {

    group "mels"
    description "build a fucking jar filled with candies!"
    manifest {
        attributes "version": 1, "Main-Class": "de.mel.fxbundle.Main", "verrrrsion": org.gradle.internal.jvm.Jvm.current()

    }
    dependsOn jar

    baseName = project.name// + '-all'
    println "BUILD FX"

    List paths = configurations.compileClasspath.filter { entry -> entry.exists()}.collect { entry ->
        println "${entry.exists()} ... $entry.absolutePath"
        if (entry.isDirectory()) {
//            println "DIR  $entry"
            entry
        } else {
//            println "FILE $entry"
            zipTree(entry)
        }
    }
    from(paths) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    with jar
    doLast {
        //write the version file in the output dir as well
        File jarFile = new File(jar.outputs.files.getAsPath());
        File versionTxt = new File("$buildDir/version.properties")
        File target = new File("$buildDir" + File.separator + "libs" + File.separator + jarFile.getName() + ".properties")
        String version = versionTxt.getText('UTF-8')
        target.text = version
        println("printing version to: " + target.getAbsolutePath())
    }
}