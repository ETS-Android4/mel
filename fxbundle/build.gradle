import java.time.LocalDateTime

apply plugin: 'java'
//apply plugin: 'gradle-one-jar'

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}
compileTestJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}
repositories {
    mavenCentral()
}


dependencies {
    compile project(path: ':drivefx')
    compile project(path: ':contactsfx')
    testCompile project(path: ':drive', configuration: 'driveTestOutput')
    testCompile 'junit:junit:4.12'
}


build {
    File moduleFolder = buildscript.sourceFile.getParentFile()
    File versionTxt = new File(moduleFolder, 'version.jar.txt')
    File versionAsset = new File('auth' + File.separator + "src" + File.separator + "main" + File.separator + "resources" + File.separator + "version.txt")
    LocalDateTime oldeVersion = null;
    try {
        String fileContents = versionTxt.getText('UTF-8')
        oldeVersion = LocalDateTime.parse(fileContents)
    } catch (Exception e) {
        oldeVersion = LocalDateTime.now()
    }
    LocalDateTime version = LocalDateTime.now()
    println("updating version from " + oldeVersion.toString() + " to " + version.toString())
    versionTxt.text = version.toString()
    //println("version asset file: "+versionAsset.getAbsolutePath())
    //versionAsset.text = version.toString()

}


task bundledJar(type: Jar) {
    group "meins"
    description "build a fucking jar filled with candies!"
    manifest {
        attributes "version": 1, "Main-Class": "de.mein.fxbundle.Main"
    }
    dependsOn jar

    baseName = project.name + '-all'
    List paths = configurations.compile.collect { entry ->
        println(entry.getAbsolutePath())
        if (entry.isDirectory())
            entry
        else
            zipTree(entry)
    }
    from(paths){
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    with jar
    doLast {
        //write the version file in the output dir as well
        File moduleFolder = buildscript.sourceFile.getParentFile()
        File versionTxt = new File(moduleFolder, 'version.jar.txt')
        File t = new File(moduleFolder, "build")
        t = new File(t, "libs")
        File target = new File(t, baseName+".jar.version.txt")
        String version = versionTxt.getText('UTF-8')
        target.text = version
        println("printing version to: "+target.getAbsolutePath())
    }
}