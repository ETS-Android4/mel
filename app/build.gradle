apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
//apply plugin: 'me.tatarka.retrolambda'

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
//        maven {
//            url "https://maven.google.com"
//        }
    }
}


buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
//        classpath 'me.tatarka:gradle-retrolambda:3.7.0'
        // NOTE: Do not place your a
        // pplication dependencies here; they belong
        // in the individual module build.gradle files
    }
}
ext {
    buildVersion = new Date().getTime().toString()
    buildVariant = "apk"
    taskName = "not yet"
    TASK_RELEASE = "release"
    TASK_DEBUG = "debug"
}
android {
    compileOptions.encoding = 'UTF-8'
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "de.syncstuff"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "0.1-beta"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "${applicationId}")

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [ eventBusIndex : 'com.example.myapp.MyEventBusIndex' ]
//            }
//        }
    }
    buildTypes {
        debug {
            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
//        compileOptions.encoding = 'UTF-8'
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}


task createProperties() {
    doLast {
        Properties p = new Properties()
        p['version'] = project.buildVersion
        p['variant'] = project.buildVariant
        //store in jar
        File assetFile = new File("src" + File.separator + "main" + File.separator + "assets" + File.separator + "version.properties")
        println("writing version asset file: ${assetFile.absolutePath}")
        assetFile.withWriter { w -> p.store(w, null) }
        // store in build directory
        File versionFile = new File("$buildDir/version.properties")
        println("writing version file: ${versionFile.absolutePath}")
        versionFile.withWriter { w -> p.store(w, null) }
    }
}


task copyFiles(type: Copy) {
    def f = rootProject.file('auth/src/main/resources')
    def f2 = rootProject.file('drive/src/main/resources')
    def f3 = rootProject.file('contacts/src/main/resources')
    def t = rootProject.file('app/src/main/assets')
    from(f)
    from(f2)
    from(f3)
    into(t)
}

preBuild {
//    Properties p = new Properties()
//    p['version'] = project.buildVersion
//    p['variant'] = project.buildVariant
//    //store in jar
//    File assetFile = new File( "src" + File.separator + "main" + File.separator + "assets" + File.separator + "version.properties")
//    println("writing version asset file: ${assetFile.absolutePath}")
//    assetFile.withWriter { w -> p.store(w, null) }
//    // store in build directory
//    File versionFile = new File("$buildDir/version.properties")
//    println("writing version file: ${versionFile.absolutePath}")
//    versionFile.withWriter { w -> p.store(w, null) }
    dependsOn copyFiles
    dependsOn createProperties
}

dependencies {
    //multidex
    implementation 'com.android.support:multidex:1.0.3'


    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:multidex:1.0.3'
    implementation project(':json')
    implementation project(':serialize')
    implementation project(':sql')
    implementation project(':auth')
    implementation project(':drive')
    testImplementation project(':drive')
    implementation project(':contacts')
    implementation 'com.android.support:support-compat:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:gridlayout-v7:28.0.0'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation 'junit:junit:4.12'
    def work_version = "1.0.0-alpha09"
    //    implementation "android.arch.work:work-runtime:$work_version"
}


assemble {
    println("buildVariant: ${gradle.startParameter.taskNames}")
    Properties p = new Properties()
    p['version'] = project.buildVersion
    p['variant'] = project.buildVariant
    if (gradle.startParameter.taskNames.size() != 1) {
        println("confused by more than one startTaskName")
        System.exit(-1)
    }
    taskName = gradle.startParameter.taskNames[0]
    taskName = taskName.substring("assemble".length())
    println("lel $taskName")
    taskName = taskName.toLowerCase()
    println("taskName: (assemble)$taskName")
    if (taskName == TASK_DEBUG) {
        File parent = new File("$buildDir/outputs/apk/debug");
        parent.mkdirs()
        new File(parent, "${archivesBaseName}-${taskName}.apk.properties").withWriter { w -> p.store(w, null) }
    } else if (taskName == TASK_RELEASE) {
        File parent = new File("$buildDir/outputs/apk/release");
        parent.mkdirs()
        new File(parent, "${archivesBaseName}-${taskName}-unsigned.apk.properties").withWriter { w -> p.store(w, null) }
    }
}

repositories {
    mavenCentral()
    google()
}

