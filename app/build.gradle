apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
}
buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
    }
}
// define mel specific stuff here
// keyStorePropFile MUST be private !!!
def keyStorePropFile = rootProject.file("keystore.properties")
ext {
    signed = false
    buildVersion = new Date().getTime().toString()
    buildVariant = "apk"
}
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "de.mel.mel"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "0.1-beta"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "${applicationId}")
    }
    // read apk signing key props here
    signingConfigs {
        def p = new Properties()
        release {
            storeFile file('/home/xor/Documents/dev/AndroidStudioProjects/mel/app/app.sign.jks')
            storePassword '123456'
            keyPassword '123456'
            keyAlias = 'buildKey'
        }
        if (keyStorePropFile.exists()) {
            p.load(new FileInputStream(keyStorePropFile))
            release {
                keyAlias p['keyAlias']
                keyPassword p['keyPassword']
                storeFile file(p['storeFile'])
                storePassword p['storePassword']
            }
            signed = true
            String path = p['storeFile']
            File storeFile = new File(path)
            println "exists? ${storeFile.exists()}"
        } else {
            println "could not find key store prop file. cannot sign apk."
        }
    }
    compileOptions {
//        encoding 'UTF-8'
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    buildTypes {
        release {
            if (keyStorePropFile.exists())
                signingConfig signingConfigs.release
            manifestPlaceholders = [appName: "Mel", icon: "ic_launcher"]
            buildConfigField("String", "BUILD_VARIANT", "\"apk-release\"")
            buildConfigField("String", "BUILD_VERSION", "\"${buildVersion}\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true
        }
        debug {
            manifestPlaceholders = [appName: "Mel DEBUG", icon: "ic_debug"]
            applicationIdSuffix ".debug"
            buildConfigField("String", "BUILD_VARIANT", "\"apk-debug\"")
            buildConfigField("String", "BUILD_VERSION", "\"${buildVersion}\"")
            minifyEnabled false
        }
    }
    // write the additional prop file
    afterEvaluate {
        assembleRelease.finalizedBy(releaseWithProps)
    }
}

// this writes the prop file miniserver needs
task releaseWithProps {
    dependsOn 'assembleRelease'
    doLast {
        if (signed) {
            println("RELEASE WITH PROPS")
            Properties p = new Properties()
            p['version'] = project.buildVersion
            p['variant'] = 'apk-release'
            File output = new File("$buildDir/outputs/apk/release")
            output.mkdirs()
            new File(output, "${archivesBaseName}-release.apk.properties")
                    .withWriter { w -> p.store(w, null) }
        } else {
            println "apk not signed, so no prop file is created"
        }
    }
}

// life is pointless without those assets
task copyToAssets(type: Copy) {
    println "copying assets..."
    def auth = rootProject.file('auth/src/main/resources')
    def filesync = rootProject.file('filesync/src/main/resources')
    def contacts = rootProject.file('contacts/src/main/resources')
    def assets = rootProject.file('app/src/main/assets')
    from(auth)
    from(filesync)
    from(contacts)
    into(assets)
}
// copy assets ,write the additional prop file and clean if necessary
preBuild {
    // return before a ton of tasks crash here
    String taskName = gradle.startParameter.taskNames[0]
    if (taskName == null || !taskName.contains(':')) {
        println "Not building Mel here..."
        return
    }
    taskName = taskName.split(':').last()
    println("prebuild() for task $taskName")
    if (taskName == 'assembleRelease') {
        println("release() -> clean()")
        dependsOn 'clean'
    }
    dependsOn 'copyToAssets'
}

dependencies {
    // mel stuff
//    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':contacts')
    api project(':filedump')
    // external stuff
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_V"
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.core:core:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
}



