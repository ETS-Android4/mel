plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
}

version '1.88'

//sourceCompatibility =        1.8
//targetCompatibility = "1.8"

repositories {
    mavenCentral()
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
    main {
        resources {
            srcDir "${project(':filesyncfx').projectDir}/src/main/resources"
            srcDir "${project(':contactsfx').projectDir}/src/main/resources"
        }
    }
}
dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_V"
    implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:0.1.0"
    implementation project(path: ':konsole')
    implementation project(path: ':auth')
    implementation project(path: ':serverparts')
    implementation project(path: ':blog')
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0'

    testImplementation project(path: ':auth')
    testImplementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task copyLicenseHtml(type: Copy) {
    def f = rootProject.file('auth/src/main/resources/de/mel/auth/licences.html')
    def t = rootProject.file('miniserver/src/main/resources/de/mel/auth/')
    from(f)
    into(t)
}

task buildServerJar(type: Jar) {
    dependsOn copyLicenseHtml
    group "mels"
    description "build a fucking jar filled with candies!"
    baseName = project.name// + '-all'
    manifest {
        attributes "version": 1, "Main-Class": "de.miniserver.MiniServer"
    }
    dependsOn jar


    List paths = configurations.compileClasspath.filter { entry -> entry.exists() }.collect { entry ->
        println(entry.getAbsolutePath())
        if (entry.isDirectory())
            entry
        else
            zipTree(entry)
    }
    from(paths) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    with jar
//    doLast {
//        //write the version file in the output dir as well
//        File moduleFolder = buildscript.sourceFile.getParentFile()
//        File versionTxt = new File(moduleFolder, 'version.jar.txt')
//        File t = new File(moduleFolder, "build")
//        t = new File(t, "libs")
//        File target = new File(t, baseName+".jar.version.txt")
//        String version = versionTxt.getText('UTF-8')
//        target.text = version
//        println("printing version to: "+target.getAbsolutePath())
//    }
}
