plugins {
    id 'org.springframework.boot'
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
}

version '0'

//sourceCompatibility =        1.8
//targetCompatibility = "1.8"

repositories {
    mavenCentral()
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
    main {
        resources {
            srcDir "${project(':auth').projectDir}/src/main/resources"
            srcDir "${project(':blog').projectDir}/src/main/resources"
        }
    }
}
dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_V"
    implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:0.1.0"
    implementation project(':konsole')
    implementation project(':blog')
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0'

    testImplementation project(path: ':auth')
    testImplementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task copyLicenseHtml(type: Copy) {
    def f = rootProject.file('auth/src/main/resources/de/mel/auth/licences.html')
    def t = rootProject.file('miniserver/src/main/resources/de/mel/auth/')
    from(f)
    into(t)
}

// the next parts build a single jar
def props = new Properties()
ext {
    buildVariant = "standalone"
    jarName = "${project.name}-${buildVariant}.jar"
}
task createProperties(dependsOn: copyLicenseHtml) {
    doLast {
        println "createProperties($buildDir)"
        props['timestamp'] = new Date().getTime().toString()
        props['version'] = "${COMMIT}".toString()
        props['variant'] = buildVariant
        //store in jar
        File resources = new File(buildDir, "resources")
        File main = new File(resources, "main")
        main.mkdirs()
        new File(main, "version.properties").withWriter { w -> props.store(w, null) }
        File libs = new File(buildDir, "libs")
        libs.mkdirs()
        new File(libs, "${jarName}.properties").withWriter { w -> props.store(w, null) }
    }
}
bootJar {
    mainClassName = 'de.mel.web.miniserver.Main'
    archiveFileName = jarName
}
processResources.dependsOn(createProperties)
// buildJarstuff ends here